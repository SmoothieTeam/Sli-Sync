import { useUploadPage } from "./useUploadPage";
import "jest";
import { renderHook } from "@testing-library/react-hooks";

const mockPostUploader = (postId) => {
  const uploadPost = jest.fn();
  const newPostId = jest.fn(() => postId);
  const replaceFile = jest.fn();
  const postUploader = { newPostId, uploadPost, replaceFile };

  return postUploader;
};

test("postId should be generated by postUploader", () => {
  const expectedPostId = "post-id";
  const postUploader = mockPostUploader(expectedPostId);
  const { result } = renderHook(() => useUploadPage(postUploader));

  expect(result.current.postId).toBe(expectedPostId);
});

test("handleSubmit should not be called uploadPost if inputs are empty", () => {
  const postUploader = mockPostUploader();
  const { result } = renderHook(() => useUploadPage(postUploader));

  result.current.handleSubmit();

  expect(postUploader.uploadPost.mock.calls.length).toBe(0);
});

test("handleSubmit should not be called uploadPost if only file input is valid", () => {
  const isUploaded = true;
  const postUploader = mockPostUploader();
  const { result } = renderHook(() => useUploadPage(postUploader));

  result.current.handleUploaded(isUploaded);
  result.current.handleSubmit();

  expect(postUploader.uploadPost.mock.calls.length).toBe(0);
});

test("handleSubmit should not be called uploadPost if title is valid", () => {
  const title = "title";
  const postUploader = mockPostUploader();
  const { result } = renderHook(() => useUploadPage(postUploader));

  result.current.handleTitle(title);
  result.current.handleSubmit();

  expect(postUploader.uploadPost.mock.calls.length).toBe(0);
});

test("handleSubmit should be called uploadPost if inputs are all valid", () => {
  const isUploaded = true;
  const title = "title";
  const postUploader = mockPostUploader();
  const { result } = renderHook(() => useUploadPage(postUploader));

  result.current.handleUploaded(isUploaded);
  result.current.handleTitle(title);
  result.current.handleSubmit();

  expect(postUploader.uploadPost.mock.calls.length).toBe(1);
});
